# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'd:\桌面\client\client.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import re
from client import Client
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox, QInputDialog, QLineEdit, QFileDialog, QTreeWidgetItem, QTreeWidget, QTableWidgetItem
import socket
import os
from PyQt5.Qt import QThread, pyqtSignal

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(809, 862)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton_connect = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_connect.setGeometry(QtCore.QRect(290, 60, 75, 23))
        self.pushButton_connect.setObjectName("pushButton_connect")
        self.pushButton_disconnect = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_disconnect.setGeometry(QtCore.QRect(390, 60, 75, 23))
        self.pushButton_disconnect.setObjectName("pushButton_disconnect")
        self.label_IP = QtWidgets.QLabel(self.centralwidget)
        self.label_IP.setGeometry(QtCore.QRect(20, 20, 71, 16))
        self.label_IP.setObjectName("label_IP")
        self.lineEdit_IP = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_IP.setGeometry(QtCore.QRect(90, 20, 151, 20))
        self.lineEdit_IP.setObjectName("lineEdit_IP")
        self.label_port = QtWidgets.QLabel(self.centralwidget)
        self.label_port.setGeometry(QtCore.QRect(260, 20, 71, 16))
        self.label_port.setObjectName("label_port")
        self.lineEdit_port = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_port.setGeometry(QtCore.QRect(300, 20, 61, 20))
        self.lineEdit_port.setObjectName("lineEdit_port")
        self.label_username = QtWidgets.QLabel(self.centralwidget)
        self.label_username.setGeometry(QtCore.QRect(390, 20, 71, 16))
        self.label_username.setObjectName("label_username")
        self.lineEdit_username = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_username.setGeometry(QtCore.QRect(430, 20, 151, 20))
        self.lineEdit_username.setObjectName("lineEdit_username")
        self.label_password = QtWidgets.QLabel(self.centralwidget)
        self.label_password.setGeometry(QtCore.QRect(590, 20, 71, 16))
        self.label_password.setObjectName("label_password")
        self.lineEdit_password = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_password.setGeometry(QtCore.QRect(620, 20, 171, 20))
        self.lineEdit_password.setEchoMode(QtWidgets.QLineEdit.Password)
        self.lineEdit_password.setClearButtonEnabled(False)
        self.lineEdit_password.setObjectName("lineEdit_password")
        self.textBrowser_message = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_message.setGeometry(QtCore.QRect(30, 120, 521, 192))
        self.textBrowser_message.setObjectName("textBrowser_message")
        self.treeWidget_server_catalogue = QtWidgets.QTreeWidget(self.centralwidget)
        self.treeWidget_server_catalogue.setGeometry(QtCore.QRect(30, 370, 521, 201))
        self.treeWidget_server_catalogue.setObjectName("treeWidget_server_catalogue")
        font = QtGui.QFont()
        font.setStrikeOut(False)
        self.treeWidget_server_catalogue.headerItem().setFont(0, font)
        self.label_server_catalogue = QtWidgets.QLabel(self.centralwidget)
        self.label_server_catalogue.setGeometry(QtCore.QRect(30, 330, 241, 31))
        font = QtGui.QFont()
        font.setFamily("Adobe Arabic")
        font.setPointSize(16)
        self.label_server_catalogue.setFont(font)
        self.label_server_catalogue.setObjectName("label_server_catalogue")
        self.label_transport_list = QtWidgets.QLabel(self.centralwidget)
        self.label_transport_list.setGeometry(QtCore.QRect(30, 590, 241, 31))
        font = QtGui.QFont()
        font.setFamily("Adobe Arabic")
        font.setPointSize(16)
        self.label_transport_list.setFont(font)
        self.label_transport_list.setObjectName("label_transport_list")
        self.lineEdit_local = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_local.setGeometry(QtCore.QRect(570, 370, 221, 21))
        self.lineEdit_local.setObjectName("lineEdit_local")
        self.label_local = QtWidgets.QLabel(self.centralwidget)
        self.label_local.setGeometry(QtCore.QRect(570, 350, 71, 16))
        self.label_local.setObjectName("label_local")
        self.pushButton_openlocal = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_openlocal.setGeometry(QtCore.QRect(570, 400, 91, 23))
        self.pushButton_openlocal.setObjectName("pushButton_openlocal")
        self.pushButton_STOR = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_STOR.setGeometry(QtCore.QRect(680, 400, 91, 23))
        self.pushButton_STOR.setObjectName("pushButton_STOR")
        self.label_server = QtWidgets.QLabel(self.centralwidget)
        self.label_server.setGeometry(QtCore.QRect(570, 440, 71, 16))
        self.label_server.setObjectName("label_server")
        self.lineEdit_server = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_server.setGeometry(QtCore.QRect(570, 460, 221, 21))
        self.lineEdit_server.setObjectName("lineEdit_server")
        self.pushButton_RETR = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_RETR.setGeometry(QtCore.QRect(680, 490, 101, 23))
        self.pushButton_RETR.setObjectName("pushButton_RETR")
        self.pushButton_CDUP = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_CDUP.setGeometry(QtCore.QRect(570, 490, 101, 23))
        self.pushButton_CDUP.setObjectName("pushButton_CDUP")
        self.pushButton_MKD = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_MKD.setGeometry(QtCore.QRect(680, 520, 101, 23))
        self.pushButton_MKD.setObjectName("pushButton_MKD")
        self.pushButton_delte = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_delte.setGeometry(QtCore.QRect(570, 520, 101, 23))
        self.pushButton_delte.setObjectName("pushButton_delte")
        self.pushButton_rename = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_rename.setGeometry(QtCore.QRect(620, 550, 111, 23))
        self.pushButton_rename.setObjectName("pushButton_rename")
        self.label_conntype = QtWidgets.QLabel(self.centralwidget)
        self.label_conntype.setGeometry(QtCore.QRect(560, 120, 241, 31))
        font = QtGui.QFont()
        font.setFamily("Adobe Arabic")
        font.setPointSize(12)
        self.label_conntype.setFont(font)
        self.label_conntype.setObjectName("label_conntype")
        self.pushButton_PASV = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_PASV.setGeometry(QtCore.QRect(610, 210, 141, 41))
        font = QtGui.QFont()
        font.setFamily("Adobe Arabic")
        font.setPointSize(20)
        self.pushButton_PASV.setFont(font)
        self.pushButton_PASV.setObjectName("pushButton_PASV")
        self.pushButton_PORT = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_PORT.setGeometry(QtCore.QRect(610, 260, 141, 41))
        font = QtGui.QFont()
        font.setFamily("Adobe Arabic")
        font.setPointSize(20)
        self.pushButton_PORT.setFont(font)
        self.pushButton_PORT.setObjectName("pushButton_PORT")
        self.textBrowser_conntype = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_conntype.setGeometry(QtCore.QRect(610, 160, 141, 31))
        self.textBrowser_conntype.setObjectName("textBrowser_conntype")
        self.pushButton_rename_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_rename_2.setGeometry(QtCore.QRect(620, 580, 111, 23))
        self.pushButton_rename_2.setObjectName("pushButton_rename_2")
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(30, 620, 731, 192))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(5)
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(4, item)
        self.tableWidget.setColumnWidth(0, 205)
        self.tableWidget.setColumnWidth(1, 100)
        self.tableWidget.setColumnWidth(2, 205)
        self.tableWidget.setColumnWidth(3, 100)
        self.tableWidget.setColumnWidth(4, 100)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.bind_signal_slot()
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton_connect.setText(_translate("MainWindow", "连接"))
        self.pushButton_disconnect.setText(_translate("MainWindow", "断开"))
        self.label_IP.setText(_translate("MainWindow", "服务器端IP"))
        self.lineEdit_IP.setText(_translate("MainWindow", "166.111.80.66"))
        self.label_port.setText(_translate("MainWindow", "端口号"))
        self.lineEdit_port.setText(_translate("MainWindow", "21"))
        self.label_username.setText(_translate("MainWindow", "用户名"))
        self.lineEdit_username.setText(_translate("MainWindow", "ssast2021"))
        self.label_password.setText(_translate("MainWindow", "密码"))
        self.lineEdit_password.setText(_translate("MainWindow", "%SSAST!Fall42"))
        self.treeWidget_server_catalogue.headerItem().setText(0, _translate("MainWindow", "文件名"))
        self.treeWidget_server_catalogue.headerItem().setText(1, _translate("MainWindow", "文件类型"))
        self.treeWidget_server_catalogue.headerItem().setText(2, _translate("MainWindow", "文件大小"))
        self.treeWidget_server_catalogue.headerItem().setText(3, _translate("MainWindow", "最近修改"))
        self.label_server_catalogue.setText(_translate("MainWindow", "服务器文件目录"))
        self.label_transport_list.setText(_translate("MainWindow", "传输列表"))
        self.label_local.setText(_translate("MainWindow", "本地目录"))
        self.pushButton_openlocal.setText(_translate("MainWindow", "打开本地文件"))
        self.pushButton_STOR.setText(_translate("MainWindow", "上传文件(STOR)"))
        self.label_server.setText(_translate("MainWindow", "服务器目录"))
        self.pushButton_RETR.setText(_translate("MainWindow", "下载文件(RETR)"))
        self.pushButton_CDUP.setText(_translate("MainWindow", "上级目录（CDUP）"))
        self.pushButton_MKD.setText(_translate("MainWindow", "新建文件夹(MKD)"))
        self.pushButton_delte.setText(_translate("MainWindow", "删除文件夹(RMD)"))
        self.pushButton_rename.setText(_translate("MainWindow", "重命名(RNFR+RNTO)"))
        self.label_conntype.setText(_translate("MainWindow", "当前连接的状态"))
        self.pushButton_PASV.setText(_translate("MainWindow", "PASV"))
        self.pushButton_PORT.setText(_translate("MainWindow", "PORT"))
        self.pushButton_rename_2.setText(_translate("MainWindow", "SYST+TYPE"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "服务器目录"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "传输方向"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "本地目录"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "文件大小"))
        item = self.tableWidget.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "传输状态"))


    """
        采用封装好的命令行版的client，进行操作
    """
    def __init__(self):
        self.client = Client()
        self.serverDir = "/"

    """
        信号与槽的绑定
    """
    def bind_signal_slot(self):
        self.serverTreeRoot = self.treeWidget_server_catalogue
        self.hide_show(True)
        self.pushButton_connect.clicked.connect(self.login)
        self.pushButton_disconnect.clicked.connect(self.disconnect)
        self.pushButton_PORT.clicked.connect(self.get_port)
        self.pushButton_PASV.clicked.connect(self.get_pasv)
        self.pushButton_STOR.clicked.connect(self.get_store)
        self.pushButton_rename_2.clicked.connect(self.get_syst_types)
        self.pushButton_openlocal.clicked.connect(self.open_localfile)
        self.treeWidget_server_catalogue.currentItemChanged.connect(self.update_serverdir)
        self.pushButton_CDUP.clicked.connect(self.get_cdup)
        self.pushButton_delte.clicked.connect(self.remove)
        self.pushButton_rename.clicked.connect(self.rename)
        self.pushButton_MKD.clicked.connect(self.get_mkd)
        self.pushButton_RETR.clicked.connect(self.get_retr)

    """
        登陆函数，绑定在登录按钮上
    """
    def login(self):
        try:
            self.client.connectionFd.close()
            self.client.connectionFd = socket.socket()
            IP = self.lineEdit_IP.text()
            port = int(self.lineEdit_port.text())
            user = self.lineEdit_username.text()
            password = self.lineEdit_password.text()
            self.client.modify_basic(IP, port, user, password)
            _, return_string1, return_string2 , return_string3= self.client.login()
            self.hide_show(False)
            self.textBrowser_message.clear()
            self.serverDir = "/"
            self.serverTreeRoot = self.treeWidget_server_catalogue
            self.lineEdit_server.setText(self.serverDir)
            self.textBrowser_message.append(return_string1)
            self.textBrowser_message.append(return_string2)
            self.textBrowser_message.append(return_string3)
            self.textBrowser_conntype.setText(self.client.connType)
            self.get_list()
        except:
                QMessageBox.warning(None, "Error", "login failed")

    
    def disconnect(self):
        try:
            self.client.return_normal()
            return_string = self.client.quit()
            self.client.connectionFd.close()
            self.hide_show(True)
            self.textBrowser_message.clear()
            self.treeWidget_server_catalogue.clear()
            QMessageBox.information(None, "断开成功", return_string)
            
        except:
            QMessageBox.warning(None, "Error", "unknown failed")
    

    def hide_show(self, isHiddenOrNot):
        self.pushButton_openlocal.setHidden(isHiddenOrNot)
        self.pushButton_STOR.setHidden(isHiddenOrNot)
        self.pushButton_RETR.setHidden(isHiddenOrNot)
        self.pushButton_CDUP.setHidden(isHiddenOrNot)
        self.pushButton_MKD.setHidden(isHiddenOrNot)
        self.pushButton_delte.setHidden(isHiddenOrNot)
        self.pushButton_rename.setHidden(isHiddenOrNot)
        self.pushButton_PASV.setHidden(isHiddenOrNot)
        self.pushButton_PORT.setHidden(isHiddenOrNot)
        self.pushButton_rename_2.setHidden(isHiddenOrNot)
        self.tableWidget.setHidden(isHiddenOrNot)
        self.treeWidget_server_catalogue.setHidden(isHiddenOrNot)
        self.label_server_catalogue.setHidden(isHiddenOrNot)
        self.label_transport_list.setHidden(isHiddenOrNot)
        self.label_server.setHidden(isHiddenOrNot)
        self.label_local.setHidden(isHiddenOrNot)
        self.label_conntype.setHidden(isHiddenOrNot)
        self.textBrowser_conntype.setHidden(isHiddenOrNot)
        self.textBrowser_message.setHidden(isHiddenOrNot)
        self.lineEdit_server.setHidden(isHiddenOrNot)
        self.lineEdit_local.setHidden(isHiddenOrNot)
    
    def get_pasv(self):
        try:
            _, return_string = self.client.pasv()
            self.textBrowser_message.append(return_string)
            self.textBrowser_conntype.setText(self.client.connType)
        except:
            QMessageBox.warning(None, "Error", "PASV failed")
    

    def get_port(self):
        portNum, _ = QInputDialog.getText(None, "PORT Input", "输入20000-65536的数字", QLineEdit.Normal, "")
        try:
            portNum = int(portNum)
            _, return_string = self.client.port(portNum)
            self.textBrowser_message.append(return_string)
            self.textBrowser_conntype.setText(self.client.connType)
        
        except :
            QMessageBox.warning(None, "Error", "port failed")

    
    def open_localfile(self):
        try:
            filePath,_ = QFileDialog.getOpenFileName(None, "打开本地文件", "./")
            self.lineEdit_local.setText(filePath)
        except:
           QMessageBox.warning(None, "Error", "打开本地文件失败") 


    def get_list(self):
        try:
            if not isinstance(self.serverTreeRoot, QTreeWidget):
                self.serverTreeRoot.takeChildren()
            self.get_pasv()
            _,return_string1, return_string2, data = self.client.list(self.serverDir)

            fileList = data.split("\n")
            for file in fileList:
                items = file.split(" ")
                if len(items) <= 4:
                    continue
                treeItem = QTreeWidgetItem(self.serverTreeRoot)
                
                if items[-1][-1] == "\r":
                    treeItem.setText(0, items[-1][0:-1])
                else:
                    treeItem.setText(0, items[-1])

                #判断究竟是文件还是文件夹
                if fileList[fileList.index(file)][0] == "d":
                    treeItem.setText(1,"文件夹")
                else:
                    treeItem.setText(1,"文件")

                treeItem.setText(2, items[-5])
                treeItem.setText(3, items[-4] + " " + items[-3] + " " + items[-2])
            
            self.textBrowser_message.append(return_string1)
            self.textBrowser_message.append(return_string2)
            self.textBrowser_conntype.setText(self.client.connType)
            self.get_pwd()
        except:
            QMessageBox.warning(None, "Error", "List failed") 

    def get_syst_types(self):
        try:
            return_string1 = self.client.syst()
            return_string2 = self.client.type("I")
            self.textBrowser_message.append(return_string1)
            self.textBrowser_message.append(return_string2)
        except:
            QMessageBox.warning(None, "Error", "SYST or TYPE failed")

    def get_pwd(self):
        try: 
            return_string = self.client.pwd()
            self.textBrowser_message.append(return_string)
            
            filepath = return_string.split("\"")[-2]
            self.lineEdit_server.setText(filepath)
            self.serverDir = filepath
        except:
            QMessageBox.warning(None, "Error", "PWD failed") 


    def update_serverdir(self):
        Item = self.treeWidget_server_catalogue.currentItem()
        if Item == None:
            return
        
        self.serverTreeRoot = Item
        self.serverDir = self.get_whole_directory(Item) + Item.text(0)
        self.lineEdit_server.setText(self.serverDir)

        if Item.text(1) == "文件夹":
            self.get_cwd()
        else:
            self.client.cwd(self.get_whole_directory(Item))


    def get_whole_directory(self, Item):
        dir = "/"
        if Item:
            while Item.parent():
                Item = Item.parent()
                dir = "/" + Item.text(0) + dir
        return dir
    

    def get_cwd(self):
        try:
            return_string = self.client.cwd(self.serverDir)
            self.textBrowser_message.append(return_string)
            self.get_list()
            self.treeWidget_server_catalogue.expandAll()
        except:
            QMessageBox.warning(None, "Error", "CWD failed") 


    def get_cdup(self):
        try:
            return_string = self.client.cdup()
            self.textBrowser_message.append(return_string)
            self.treeWidget_server_catalogue.expandAll()
            self.get_pwd()
        except:
            QMessageBox.warning(None, "Error", "CDUP error")

    def get_dele(self):
        try:
            return_string = self.client.dele(self.serverDir)
            self.textBrowser_message.append(return_string)
            self.treeWidget_server_catalogue.clear()
            self.serverTreeRoot = self.treeWidget_server_catalogue
            self.serverDir = "/"
            self.get_list()
        except:
            QMessageBox.warning(None, "Error", "DELE error")
    
    def get_rmd(self):
        try:
            return_string = self.client.rmd(self.serverDir)
            self.textBrowser_message.append(return_string)
            self.treeWidget_server_catalogue.clear()
            self.serverTreeRoot = self.treeWidget_server_catalogue
            self.serverDir = "/"
            self.get_list()
        except:
            QMessageBox.warning(None, "Error", "RMD error")
        
    
    def remove(self):
        try:
            if self.serverTreeRoot.text(1) == "文件夹":
                self.get_rmd()
            else: #文件的情况
                self.get_dele()
        except:
            QMessageBox.warning(None, "Error", "删除文件（夹）按钮未知错误！")


    def rename(self):
        try:
            tmpDir = self.serverDir
            if self.serverTreeRoot.text(1) == "文件夹":
                self.serverDir = "/"
                self.client.cwd("/")
            return_string1 = self.client.rnfr(tmpDir)
            next_name, _ = QInputDialog.getText(None, "重命名", "给你的文件（夹）重新启个名字", QLineEdit.Normal, "")
            return_string2 = self.client.rnto(str(next_name))
            self.textBrowser_message.append(return_string1)
            self.textBrowser_message.append(return_string2)
            self.treeWidget_server_catalogue.clear()
            self.serverTreeRoot = self.treeWidget_server_catalogue
            self.serverDir = "/"
            self.get_list()
        except:
            QMessageBox.warning(None, "Error", "重命名按钮未知错误！")
    

    def get_mkd(self):
        try:
            new_mkd_name, _ = QInputDialog.getText(None, "新建文件夹", "新文件夹的名字", QLineEdit.Normal, "")
            return_string = self.client.mkd(new_mkd_name)
            self.textBrowser_message.append(return_string)
            self.treeWidget_server_catalogue.clear()
            self.serverTreeRoot = self.treeWidget_server_catalogue
            self.serverDir = "/"
            self.get_list()
        except:
            QMessageBox.warning(None, "Error", "MKD error")

    def set_conntype_text(self):
        self.textBrowser_conntype.setText(self.client.connType)

    def append_text(self, return_string):
        self.textBrowser_message.append(return_string)

    def add_transport_list(self, localDir ,direction):
        try:
            if direction == "<------":
                size = os.path.getsize(localDir)
            elif direction == "------>":
                size = int(self.serverTreeRoot.text(2))
            else:
                QMessageBox.warning(None,'AppendTransportQueue Error',"Direction Error")
                return

            rownum = self.tableWidget.rowCount()
            self.tableWidget.setRowCount(rownum+1)
            item = QTableWidgetItem(self.serverDir)
            self.tableWidget.setItem(rownum,0, item)
            item = QTableWidgetItem(direction)
            self.tableWidget.setItem(rownum,1, item)
            item = QTableWidgetItem(localDir)
            self.tableWidget.setItem(rownum,2, item)
            item = QTableWidgetItem(str(size))
            self.tableWidget.setItem(rownum,3, item)
            item = QTableWidgetItem("传输中")
            self.tableWidget.setItem(rownum,4, item)

            return rownum

        except:
            QMessageBox.warning(None,'AppendTransportQueue Error',"Unknown Error")

    def finish_transport(self, rownum):
        item = QTableWidgetItem("传输完毕")
        self.tableWidget.setItem(rownum,4, item)

    def get_store(self):
        try:
            if self.client.connType == "NORMAL":
                QMessageBox.warning(None, "Error", "use PASV or PORT first")
                return
            filepath = self.lineEdit_local.text()
            if len(filepath) == 0:
                QMessageBox.warning(None, "Error", "没选中文件")
                return

            filepath = str(filepath)
            rownum = self.add_transport_list(filepath, "<------")

            self.thread = Thread_stor(filepath, rownum, self.client)
            self.thread.signal_finished.connect(self.finish_transport)
            self.thread.signal_settext.connect(self.set_conntype_text)
            self.thread.signal_append_text.connect(self.append_text)
            self.thread.signal_reset.connect(self.reset)
            self.thread.start()

        except:
            QMessageBox.warning(None, "Error", "STOR failed")

    def get_retr(self):
        try:
            if self.client.connType == "NORMAL":
                QMessageBox.warning(None, "Error", "use PASV or PORT first")
                return
            local_filePath = QFileDialog.getExistingDirectory(None, "选择下载至本地的位置", "../")

            rownum = self.add_transport_list(local_filePath, "------>")

            self.thread = Thread_retr(local_filePath, self.serverDir, rownum, self.client)
            self.thread.signal_finished.connect(self.finish_transport)
            self.thread.signal_settext.connect(self.set_conntype_text)
            self.thread.signal_append_text.connect(self.append_text)
            self.thread.start()
        except:
            QMessageBox.warning(None, "Error", "RETR error")

    def reset(self):
        self.serverTreeRoot = self.treeWidget_server_catalogue
        self.treeWidget_server_catalogue.clear()
        self.serverDir = "/"
        self.get_list()


class Thread_retr(QThread):
    signal_finished = pyqtSignal(int)
    signal_settext = pyqtSignal()
    signal_append_text = pyqtSignal(str)
    def __init__(self, _localFilePos,_serverDir, _rownum, _client):
        super().__init__()
        self.localFilePos = _localFilePos
        self.serverDir = _serverDir
        self.rownum = _rownum
        self.client = _client
    
    def run(self):
        return_string1, return_string2 = self.client.retr(self.serverDir, self.localFilePos)
        self.signal_finished.emit(self.rownum)
        self.signal_settext.emit()
        self.signal_append_text.emit(return_string1)
        self.signal_append_text.emit(return_string2)


class Thread_stor(QThread):
    signal_finished = pyqtSignal(int)
    signal_settext = pyqtSignal()
    signal_append_text = pyqtSignal(str)
    signal_reset =  pyqtSignal()

    def __init__(self, _localFilePos, _rownum, _client):
        super().__init__()
        self.localFilePos = _localFilePos
        self.rownum = _rownum
        self.client = _client

    def run(self):
        return_string1, return_string2 = self.client.stor(self.localFilePos)
        self.signal_finished.emit(self.rownum)
        self.signal_settext.emit()
        self.signal_append_text.emit(return_string1)
        self.signal_append_text.emit(return_string2)
        self.signal_reset.emit()
